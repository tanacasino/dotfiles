#
# $HOME/.zshrc
# not using oh-my-zsh version .zshrc
#
### general config ###
export LANG=ja_JP.UTF-8
export LESSCHARSET=utf-8
# python-pip cache
export PIP_DOWNLOAD_CACHE="$HOME/.pip-cache"
export EDITOR=vim
## PATH ##
typeset -U path
path=(
      $HOME/bin(N-/)
      $HOME/local/bin(N-/)
      $path
     )
## keybind ##
bindkey -e


### OSTYPE ###
case "${OSTYPE}" in
darwin*)
    # prerequires
    # homebrew
    # # brew install coreutils
    # MacVim
    #
    # GNU (prereq: brew install coreutils)
    alias ls='gls --color=auto'
    if [ -f $HOME/.dir_colors ]; then
        eval $(gdircolors -b $HOME/.dir_colors)
    fi
    # Byobu(brew install byobu)
    export BYOBU_PREFIX=$(brew --prefix)
    # MacVim(kaoriya)
    export EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim
    alias vi='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
    alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
    ;;
*)
    alias ls='ls --color=auto'
    if [ -f $HOME/.dir_colors ]; then
        eval $(dircolors -b $HOME/.dir_colors)
    fi
    ;;
esac


### nocorrect ###
if [ -f ~/.zsh_nocorrect ]; then
    while read -r COMMAND; do
        alias $COMMAND="nocorrect $COMMAND"
    done < ~/.zsh_nocorrect
fi


### zsh options ###
## 補完 ##
autoload -U compinit
compinit
# 補完候補を一覧表示
setopt auto_list
# TAB で順に補完候補を切り替える
setopt auto_menu
# 補完候補のカーソル選択を有効に
zstyle ':completion:*:default' menu select=1
# 補完候補を詰めて表示
setopt list_packed
# コマンドラインの引数で --prefix=/usr などの = 以降でも補完できる
setopt magic_equal_subst
# 複数シェル間でヒストリーを共有しない
setopt append_history no_inc_append_history no_share_history
# color ##
autoload colors
colors
# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
setopt prompt_subst
# 指定したコマンド名がなく、ディレクトリ名と一致した場合 cd する
setopt auto_cd
# cd でTabを押すとdir list を表示
setopt auto_pushd
# ディレクトリスタックに同じディレクトリを追加しないようになる
setopt pushd_ignore_dups
# コマンドのスペルチェックをする
setopt correct


### git ###
# this is from oh-my-zsh
# https://github.com/robbyrussell/oh-my-zsh
# get the name of the branch we are on
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
}
# Checks if working tree is dirty
parse_git_dirty() {
  local SUBMODULE_SYNTAX=''
  if [[ $POST_1_7_2_GIT -gt 0 ]]; then
        SUBMODULE_SYNTAX="--ignore-submodules=dirty"
  fi
  if [[ -n $(git status -s ${SUBMODULE_SYNTAX}  2> /dev/null) ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  else
    echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  fi
}
ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[green]%}("
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[green]%})%{$fg[red]%}+%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[green]%})"


### autojump ###
# this is from oh-my-zsh
# https://github.com/robbyrussell/oh-my-zsh
if [ $commands[autojump] ]; then # check if autojump is installed
  if [ -f /usr/share/autojump/autojump.zsh ]; then # debian and ubuntu package
    . /usr/share/autojump/autojump.zsh
  elif [ -f /etc/profile.d/autojump.zsh ]; then # manual installation
    . /etc/profile.d/autojump.zsh
  elif [ $commands[brew] -a -f `brew --prefix`/etc/autojump.zsh ]; then # mac os x with brew
    . `brew --prefix`/etc/autojump.zsh
  fi
fi


### Prompt ###
# PROMPT  : 通常のプロンプト
# PROMPT2 : for/whileなど複数行入力時のプロンプト
# SPROMPT : 入力ミスを確認する際のプロンプト
# RPROMPT : 右側に表示するプロンプト
PROMPT='%{${fg_bold[white]}%}%n%{$reset_color%}%{${fg[white]}%}@%m%{$reset_color%} $(git_prompt_info)%(?,,%{${fg_bold[white]}%}[%?]%{$reset_color%} )%{$fg[yellow]%}$%{$reset_color%} '
RPROMPT='[%{$fg[green]%}%~%{$reset_color%}]'


#### Alias ####
### General ###
alias l='ls -CF'
alias ll='ls -lF'
alias la='ls -A'
alias lh='ll -h'
alias lla='ls -AlF'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias hist='history'
alias ipython='PAGER="less -r" ipython'

### Git ###
alias g='git'
compdef g=git
alias gst='git status'
compdef _git gst=git-status
gdv() { git diff -w "$@" | view - }
compdef _git gdv=git-diff
alias gc='git commit -v'
compdef _git gc=git-commit
alias gca='git commit -v -a'
compdef _git gca=git-commit
alias gco='git checkout'
compdef _git gco=git-checkout
alias gcm='git checkout master'
alias gb='git branch'
compdef _git gb=git-branch
alias gba='git branch -a'
compdef _git gba=git-branch
alias gcount='git shortlog -sn'
compdef gcount=git
alias gcp='git cherry-pick'
compdef _git gcp=git-cherry-pick
alias glg='git log --stat --max-count=5'
compdef _git glg=git-log
alias glgg='git log --graph --max-count=5'
compdef _git glgg=git-log
alias gss='git status -s'
compdef _git gss=git-status
alias ga='git add'
compdef _git ga=git-add
alias gm='git merge'
compdef _git gm=git-merge
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'
