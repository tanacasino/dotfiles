"===================================
" Plugin settings.
"===================================

"-----------------------------------
" neocomplete
"-----------------------------------
" 補完機能の設定
" NOTE ほとんどどっかのコピペなので整理が必要
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()




"------------------------------------
" Align
"------------------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3


"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp = 1


"-----------------------------------
" syntastic
"-----------------------------------
" ファイルオープン時にチェックする
"let g:syntastic_check_on_open = 1
" ファイルオープン時はチェックしない(ファイル保存時にチェックする)
let g:syntastic_check_on_open = 0


"-----------------------------------
" vim-indent-guides
"-----------------------------------
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgray ctermbg=darkgray


"-----------------------------------
" YankRing
"-----------------------------------
let g:yankring_history_dir = expand('$HOME')
let g:yankring_history_file = '.yankring_history'
let g:yankring_max_history = 10
let g:yankring_window_height = 13
let g:yankring_manual_clipboard_check = 0


"-----------------------------------
" visualstar
"-----------------------------------
" 検索時に移動しない
map * <Plug>(visualstar-*)N
map # <Plug>(visualstar-#)N


"-----------------------------------
" Unite
"-----------------------------------
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" let g:unite_source_grep_default_opts = '-iHn --color=never'
" grep時の表示件数
let g:unite_source_grep_max_candidates = 300
" grepにagを使用する
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--hidden --nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

nnoremap <silent> Uf :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap <silent> Ub :<C-u>Unite buffer<CR>
nnoremap <silent> Um :<C-u>Unite file_mru<CR>
nnoremap <silent> Ug :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> Ur :<C-u>UniteResume search-buffer<CR>
nnoremap <silent> Ut :<C-u>Unite tab<CR>


"-----------------------------------
" VimFiler
"-----------------------------------
command Vf VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit
nnoremap <silent> Uv :<C-u>Vf<CR>


"-----------------------------------
" tagbar
"-----------------------------------
" case MacOS X and homebrew env
if has('mac')
  let g:tagbar_ctags_bin = expand('$HOME') . '/bin/ctags'
endif
