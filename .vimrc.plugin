"===================================
" Plugin settings.
"===================================


"------------------------------------
" neosnippet
"------------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1



"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp = 1



"-----------------------------------
" syntastic
"-----------------------------------
" ファイルオープン時はチェックしない(ファイル保存時にチェックする)
let g:syntastic_check_on_open = 0
let g:syntastic_mode_map = {
      \"mode": "active",
      \"active_filetypes": [],
      \"passive_filetypes": ["scala", "go"]
\}

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']



"-----------------------------------
" visualstar
"-----------------------------------
" 検索時に移動しない
map * <Plug>(visualstar-*)N
map # <Plug>(visualstar-#)N



"-----------------------------------
" Denite
"-----------------------------------
" insertからnormalにC-[でいけるようにする
call denite#custom#map(
      \ 'insert',
      \ '<C-[>',
      \ '<denite:enter_mode:normal>',
      \ 'noremap'
      \)

" grepにagを使用する
call denite#custom#var('file_rec', 'command',
  \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

nnoremap <silent> Uf :<C-u>Denite -buffer-name=files file_rec file:new<CR>
nnoremap <silent> UF :<C-u>DeniteBufferDir file:new<CR>
nnoremap <silent> Ub :<C-u>Denite buffer<CR>
nnoremap <silent> Um :<C-u>Denite file_mru<CR>
nnoremap <silent> Ug :<C-u>Denite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> UG :<C-u>Denite -resume -buffer-name=search-buffer<CR>
nnoremap <silent> Ur :<C-u>Denite -resume<CR>
nnoremap <silent> Ut :<C-u>Denite tab<CR>


"-----------------------------------
" tagbar
"-----------------------------------
" case MacOS X and homebrew env
if has('mac')
  let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
endif
let g:tagbar_type_scala = {
    \ 'ctagstype' : 'scala',
    \ 'sro'       : '.',
    \ 'kinds'     : [
      \ 'p:packages',
      \ 'T:types:1',
      \ 't:traits',
      \ 'o:objects',
      \ 'O:case objects',
      \ 'c:classes',
      \ 'C:case classes',
      \ 'm:methods',
      \ 'V:values:1',
      \ 'v:variables:1'
    \ ]
\ }



"-----------------------------------
" vim-airline
"-----------------------------------
let g:airline_powerline_fonts = 1



"-----------------------------------
" NERD Tree
"-----------------------------------
nnoremap <silent> Uv :<C-u>:NERDTreeToggle<CR>



"-----------------------------------
" osyo-manga/vim-precious
"-----------------------------------
" filetype=vim,markdown 以外の setfiletype を無効にする
let g:precious_enable_switchers = {
\ "*" : {
\   "setfiletype" : 0
\ },
\ "vim" : {
\   "setfiletype" : 1
\ },
\ "markdown" : {
\   "setfiletype" : 1
\ },
\}


